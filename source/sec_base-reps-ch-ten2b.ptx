<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_firstch-ten2b" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Converting from Base-10 to Non-Standard Bases</title>

  <introduction>
    <p>In the previous section, we considered that representation of 
    numbers using bases other than the base-10 (decimal) system is 
    possible, and sometimes necessary. In that section you considered 
    the true meaning of <em>place-value</em> and built on your 
    intuitive understanding to identify a scheme for converting an 
    integer, written in any non-standard base, into its decimal-
    equivalent.</p>

    <p>In this section, we'll work in the opposite direction. Say we
    have a decimal represresentation of a value. How do we identify 
    or construct its base-<m>b</m> equivalent?</p>
  </introduction>

  <subsection><title>Developing a Strategy</title>
    <p>THIS SECTION WILL NEED LOTS OF EDITING -- just getting a 
    "working version" up for now.</p>

    <p>In order to convert a value whose decimal representation is 
    <m>n</m> into its corresponding base-<m>b</m> equivalent, we 
    need to first identify the number of whole copies of <m>b</m> 
    which divide evenly into <m>n</m>. The left over amount (you've 
    likely called this the <em>remainder</em> when discussing division
    in your previous math courses) will be the <em>singles</em> digit 
    in the base-<m>b</m> representation of <m>n</m>.</p>

    <p>Let's consider an example, which we'll parse throughout this 
    discussion. Consider the decimal value <m>n = 113</m>, for which 
    we'll try to discover its base-<m>3</m> equivalent. The paragraph 
    above suggests that we should start by identifying the number of 
    "whole copies" of <m>3</m> which divide evenly into <m>113</m>. 
    Notice that <m>3\cdot 37 = 111</m>, so there are <m>37</m> "whole" 
    copies of <m>3</m> within the decimal value <m>113</m>, with a 
    remainder of <m>2</m>. That is, <m>113 = 3\cdot \left(37\right) + 
    2</m>, and <m>2</m> will occupy the singles-digit in the 
    base-<m>3</m> representation of <m>113</m>.</p> 

    <p>How can we identify the next digit to the left in the 
    base-<m>3</m> representation of <m>113</m>? That digit will be 
    the remainder after considering the number of whole copies of 
    <m>3^2</m> within the decimal value <m>113</m>, after accounting
    for the singles digit. That is, the digit occupying the second 
    place-value will be the remainder after considering the number 
    of whole copies of <m>9</m> which divide evenly into <m>\left(
    113 - 2\right)</m>. More simply, we could consider the remainder 
    after <m>3</m> is divided into <m>37</m> -- the quotient from the 
    previous step. From here, we note that <m>37 = 3\cdot
    \left(12\right) + 1</m>, and so the digit occupying the second 
    position will be <m>1</m>.</p>

    <p>Identifying the digit occupying the remaining positions is 
    similar. The next digit will be the remainder, when dividing 
    <m>3</m> into the quotient from the previous step (here, that
    value was <m>12</m>). Since <m>12 = 3\cdot \left(4\right) + 0</m>,
    the digit occupying the third position from the right is <m>0</m>. 
    Similarly, the digit occupying the next position is the remainder 
    after <m>3</m> is divided into <m>4</m> (again, using the previous
    quotient). Since <m>4 = 3\cdot\left(1\right) + 1</m>, the digit 
    occupying that fourth position is <m>1</m>. Finally, the leftmost 
    digit will be the remainder when this quotient (<m>1</m>) is 
    divided by the desired base (here, <m>3</m>). So we have 
    <m>1 = 3\cdot \left(0\right) + 1</m>, and the leftmost digit is 
    <m>1</m>. To summarize, we've discovered that 
    <m>\left(113\right)_{10} = \left(11012\right)_{3}</m>.</p>

    <p>Let's describe the process above before summarizing with a 
    more concise version of the procedure. If we wish to find the 
    base-<m>b</m> equivalent representation of the decimal integer 
    <m>n</m>, we write
      <me>n = b\cdot q_{0} + r_{0}, \text{ where } 0 \leq r_{0} \lt b</me>
    Next, we rewrite <m>q_{0}</m> in the same fashion.
      <me>q_{0} = b\cdot q_{1} + r_{1}, \text{ where } 0 \leq r_{1} \lt b</me>
    We continue this while the quotients, <m>q_{i}</m> are non-zero.
    Once we arrive at a quotient <m>q_{k} = 0</m>, the process 
    terminates and we use the remainders to write the base-<m>b</m> 
    representation <m>\left(r_{k}r_{k-1}\cdots r_{1}r_{0}\right)_{b}</m> 
    of our original <m>n</m>.  
    </p>

    <p>We recap the process of constructing the base-<m>3</m> 
    equivalent of <m>\left(113\right)_{10}</m> below.
      <md>
        <mrow>113 \amp = 3\cdot 37 + 2</mrow>
        <mrow>37 \amp = 3\cdot 12 + 1</mrow>
        <mrow>12 \amp = 3\cdot 4 + 0</mrow>
        <mrow>4 \amp = 3\cdot 1 + 1</mrow>
        <mrow>1 \amp = 3\cdot 0 + 1</mrow>
      </md>
    
    At the last line, we arrive at a quotient of <m>0</m>, so we 
    terminate the procedure. The base-<m>3</m> encoding of 
    <m>\left(113\right)_{10}</m> is given by <m>\left(11012\right)_{3}</m>,
    reading the remainders from the last line back up to the first.
    </p>
  </subsection>

  <subsection><title>Let's Try It!</title>
    <p>Now that we've developed a strategy for writing the base-<m>b</m> 
    equivalent of a given decimal integer, let's get more comfortable 
    using it. In this section, you'll have a variety of opportunities 
    to work through our algorithm. You'll have lots of support through 
    the initial examples, but we'll provide less and less structure 
    with each successive task.
    </p>

    <exercise exercise-customization="inline" exercise-interactive="static"><title>Convert to Binary, Part I</title><introduction>
    	</introduction><myopenmath problem="975427" />
		</exercise>

    <exercise exercise-customization="inline" exercise-interactive="static"><title>Convert to Binary, Part II</title><introduction>
    	</introduction><myopenmath problem="975431" />
		</exercise>

    <exercise exercise-customization="inline" exercise-interactive="static"><title>Convert to Binary, Part III</title><introduction>
    	</introduction><myopenmath problem="975437" />
		</exercise>

    <exercise exercise-customization="inline" exercise-interactive="static"><title>Convert to Binary, Part IV</title><introduction>
    	</introduction><myopenmath problem="975442" />
		</exercise>

    <p>Now that you've converted from decimal to binary a few times, let's 
    work with some other bases. In the examples that follow, the bases 
    we want to convert to will change but your strategy remains the same.</p>

    <exercise exercise-customization="inline" exercise-interactive="static"><title>Convert to Base-b I</title><introduction>
      </introduction><myopenmath problem="975449" />
		</exercise>

    <exercise exercise-customization="inline" exercise-interactive="static"><title>Convert to Base-b II</title><introduction>
      </introduction><myopenmath problem="975449" />
		</exercise>

    <exercise exercise-customization="inline" exercise-interactive="static"><title>Convert to Base-b III</title><introduction>
      </introduction><myopenmath problem="975449" />
		</exercise>
  </subsection>

  <subsection><title>Converting to Hexadecimal</title>
    <p>Let's close out the section with an example showing how to convert 
    a decimal integer into hexadecimal. As reminder, hexadecimal is the 
    base-<m>16</m> number system. We make use of the characters <m>A</m> 
    through <m>F</m> to reprecent the decimal values <m>10</m> through 
    <m>15</m> in order to avoid ambiguity in the base-<m>16</m> value we 
    are writing. Below is a completely worked example, but it is followed
    by an embedded exercise for you to confirm your understanding.
    </p>

    <example><title>Converting from Decimal to Hexadecimal (base-16)</title>
      <p>Convert <m>\left(1133\right)_{10}</m> to its equivalent hexadecimal 
      form.</p>
      <md>
        <mrow>1133 \amp = 16\cdot 70 + 13</mrow>
        <mrow>70 \amp = 16\cdot 4 + 6</mrow>
        <mrow>4 \amp = 16\cdot 0 + 4</mrow>
      </md>

      <p>Remembering that <m>\left(13\right)_{10} = \left(D\right)_{16}</m>, 
      we can write the hexadecimal representation of 
      <m>\left(1133\right)_{10}</m> as <m>\left(46D\right)_{16}</m>. 
      </p>
    </example>

    <exercise exercise-customization="inline" exercise-interactive="static"><title>Convert to Hexadecimal</title><introduction>
      </introduction><myopenmath problem="975491" />
		</exercise>
  </subsection>


  <subsection><title>Conclusion</title>
    <p>In this section, we've learned the <em>mechanics</em> of converting
    a decimal number into its base-<m>b</m> equivalent for a variety of 
    bases. You got practice implementing the conversion algorithm, and even 
    worked in bases higher than <m>10</m> -- where we needed to introduce the
    use of symbols to represent large digits. In the next section, we'll 
    explore the most common non-standard base systems in a bit more 
    detail. We'll also highlight the connections between them.
    </p>
  </subsection>
  

</section>

