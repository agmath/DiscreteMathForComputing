<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_arrays-ch-one-dimensional-arrays" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>One-Dimensional Arrays</title>

  <introduction>
    <p>As a reminder, an <em>array</em> is a structure for storing several 
    data values, as long as those values all share the same data type. It is 
    common to refer to one-dimensional arrays as <em>vectors</em>, though the 
    term "vector" has a special meaning in physics and engineering.</p>
  </introduction>

  <subsection><title>Addition and Scalar Multiplication</title>
  <p>A one-dimensional array looks a lot like a list of values. For example, 
  <c>myFirstArray = [1, 5, 9, -11]</c> is a one-dimensional array with four 
  elements while <c>mySecondArray = [1.5, -2.8, 3]</c> is a one-dimensional 
  array with three elements. In the two examples, <c>myFirstArray</c> is an 
  array of integer values, while <c>mySecondArray</c> is an array of floats. 
  Perhaps you remember from our first chapter that there are different memory 
  requirements for integers versus floats, and that can sometimes make a big 
  difference in our programs.
  </p>

  <p>Addition and subtraction between arrays is done <em>elementwise</em>. For 
  example, we can add the two arrays <c>[1, 6, 3]</c> and <c>[5, 11, 2]</c> as 
  follows.
  <md>
    <mrow>\left[\begin{array}{c} 1\\ 6\\ 3\end{array}\right] + \left[\begin{array}{c} 5\\ 11\\ 2\end{array}\right] \amp = \left[\begin{array}{c} \left(1 + 5\right)\\ \left(6 + 11\right)\\ \left(3 + 2\right)\end{array}\right]</mrow>
    <mrow> \amp = \left[\begin{array}{c} 6\\ 17\\ 5\end{array}\right]</mrow>
  </md>  
  Subtraction between those two arrays is done similarly.
  <md>
    <mrow>\left[\begin{array}{c} 1\\ 6\\ 3\end{array}\right] - \left[\begin{array}{c} 5\\ 11\\ 2\end{array}\right] \amp = \left[\begin{array}{c} \left(1 - 5\right)\\ \left(6 - 11\right)\\ \left(3 - 2\right)\end{array}\right]</mrow>
    <mrow> \amp = \left[\begin{array}{c} -4\\ -5\\ 1\end{array}\right]</mrow>
  </md>
  </p>

  <p>A <em>scalar</em> is a quantity which has only a magnitude. For example, 
  the value <m>8</m> is considered a scalar, while <m>[8]</m> may be considered 
  a one-dimensional array containing a single element. We can multiply arrays 
  by a scalar value. To do this, each element of the array is multiplied by the 
  scalar. For example, let's multiply the array <c>[2, 12, -64, 32, 18]</c> by 
  the scalar <m>\frac{1}{2}</m>.
  <md>
    <mrow>\frac{1}{2}\cdot \left[\begin{array}{c} 2\\ 12\\ -64\\ 32\\ 18\end{array}\right] \amp = \left[\begin{array}{c} \left(\frac{1}{2}\cdot 2\right)\\ \left(\frac{1}{2}\cdot 12\right)\\ \left(\frac{1}{2}\cdot \left(-64\right)\right)\\ \left(\frac{1}{2}\cdot 32\right)\\ \left(\frac{1}{2}\cdot 18\right)\end{array}\right]</mrow>
    <mrow> \amp = \left[\begin{array}{c} 1\\ 6\\ -32\\ 16\\ 9\end{array}\right]</mrow>
  </md>  
  </p>

  <p>Use what you've learned to verify your grasp of addition, subtraction, and  
  scalar multiplication for one-dimensional arrays.
  </p>
  <exercise exercise-customization="inline" exercise-interactive="static"><title>Array Addition/Subtraction</title><introduction>
    </introduction><myopenmath problem="987312" />
	</exercise>

  <exercise exercise-customization="inline" exercise-interactive="static"><title>Scalar Multiplication</title><introduction>
    </introduction><myopenmath problem="987525" />
	</exercise>



  <p>At the end of our chapter on counting, we encountered big-O notation and 
  its use in describing the <em>run-time complexity</em> of a routine, algorithm, 
  or program. Answer the following questions about the run-time complexity of 
  array addition and scalar multiplication.
  </p>
  <exercise exercise-customization="inline" exercise-interactive="static"><title>Array Addition Complexity</title><introduction>
    </introduction><myopenmath problem="987073" />
	</exercise>

  <exercise exercise-customization="inline" exercise-interactive="static"><title>Scalar Multiplication Complexity</title><introduction>
    </introduction><myopenmath problem="987075" />
	</exercise>
  </subsection>

  <subsection><title>Inner-products</title>
    <p>In addition to adding/subtracting arrays or multiplying arrays by 
    scalars, there's lots of interesting and meaningful operations that can 
    be done with arrays. We'll take a look at one of them, called the 
    <em>inner-product</em> in this section. Our section will end by mentioning 
    the <em>outer-product</em>, but we'll need to wait until we see 
    two-dimensional arrays before we can compute that.</p>

    <p>Given two arrays of equal length, we can calculate the inner-product 
    between them. We'll introduce the inner-product algorithmically using 
    the pseudocode below.
    </p>

    <cd>
      <cline>def inner_product(myArray1, myArray2):</cline>
      <cline>  n = length(myArray1)</cline>
      <cline>  if length(myArray2) not equal n:</cline>
      <cline>    print("Arrays must be the same length")</cline>
      <cline>    return NULL</cline>
      <cline>  inner_prod = 0</cline>
      <cline>  for i in [0, 1, ..., n - 1]:</cline>
      <cline>    inner_prod = inner_prod + (myArray1[i] * myArray2[i])</cline>
      <cline>  return inner_prod</cline>
    </cd>

    <p>Answer the following regarding the run-time complexity of the following 
    implementation to compute the inner product between two arrays.
    </p>

    <exercise exercise-customization="inline" exercise-interactive="static"><title>Inner Product Complexity</title><introduction>
      </introduction><myopenmath problem="988776" />
	  </exercise>

    <p>Now try the following examples for computing the inner product between 
    two arrays on your own.</p>

    <exercise exercise-customization="inline" exercise-interactive="static"><title>Compute Inner Product 1</title><introduction>
      </introduction><myopenmath problem="988777" />
	  </exercise>

    <exercise exercise-customization="inline" exercise-interactive="static"><title>Compute Inner Product 1</title><introduction>
      </introduction><myopenmath problem="988778" />
	  </exercise>

    <exercise exercise-customization="inline" exercise-interactive="static"><title>Compute Inner Product 1</title><introduction>
      </introduction><myopenmath problem="988779" />
	  </exercise>

    <p>Another type of array product is the <em>outer-product</em>. Given two 
    one-dimensional arrays, we can define the outer product between them. The 
    outer-product, however, results in a two-dimensional array. If <c>array1</c> 
    and <c>array2</c> are arrays of length <m>m</m> and <m>n</m> respectively, 
    then the outer product between <c>array1</c> and <c>array2</c> is an 
    <m>m\times n</m> array. Note that this also means that 
    <c>inner_product(array1, array2)</c> is generally not the same as 
    <c>inner_product(array2, array1)</c>. We'll see how to compute the inner 
    product in our next section.
    </p>

  </subsection>



</section>

